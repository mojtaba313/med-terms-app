// File: /app/categories/page.tsx
"use client";
import { useState, useEffect, useCallback } from "react";
import { Sidebar } from "../../components/layout/sidebar";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "../../components/ui/card";
import { Button } from "../../components/ui/button";
import { Input } from "../../components/ui/input";
import { AddCategoryDialog } from "../../components/add-category-dialog";
import { Category } from "../../types";
import { useAuth } from "../../components/auth-provider";
import { motion, AnimatePresence } from "framer-motion";
import { useToast } from "../../hooks/use-toast";

export default function CategoriesPage() {
  const [categories, setCategories] = useState<Category[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [showAddDialog, setShowAddDialog] = useState(false);
  const { user } = useAuth();
  const { toast } = useToast();

  // Debounce search
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchTerm(searchTerm);
    }, 300);

    return () => clearTimeout(timer);
  }, [searchTerm]);

  useEffect(() => {
    if (user) {
      fetchCategories();
    }
  }, [user]);

  const fetchCategories = useCallback(async () => {
    const controller = new AbortController();
    try {
      const response = await fetch("/api/categories", {
        signal: controller.signal,
      });
      if (response.ok) {
        const data = await response.json();
        setCategories(data.data || []);
      } else {
        throw new Error("Failed to fetch categories");
      }
    } catch (error: any) {
      if (error.name !== 'AbortError') {
        console.error("Error fetching categories:", error);
        toast({
          title: "خطا",
          description: "در دریافت دسته‌بندی‌ها مشکلی پیش آمد",
          variant: "destructive",
        });
      }
    } finally {
      setIsLoading(false);
    }

    return () => controller.abort();
  }, [toast]);

  const filteredCategories = categories.filter(
    (category) =>
      category.name.toLowerCase().includes(debouncedSearchTerm.toLowerCase()) ||
      category.description?.toLowerCase().includes(debouncedSearchTerm.toLowerCase())
  );

  const handleAddCategory = async (categoryData: {
    name: string;
    description?: string;
    color: string;
  }) => {
    try {
      const response = await fetch("/api/categories", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(categoryData),
      });

      if (response.ok) {
        const result = await response.json();
        setCategories((prev) => [result.data, ...prev]);
        setShowAddDialog(false);
        toast({
          title: "موفق",
          description: "دسته‌بندی با موفقیت اضافه شد",
        });
      } else {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to add category");
      }
    } catch (error: any) {
      console.error("Error adding category:", error);
      toast({
        title: "خطا",
        description: error.message || "خطا در افزودن دسته‌بندی",
        variant: "destructive",
      });
    }
  };

  if (isLoading) {
    return (
      <div className="flex min-h-screen bg-background">
        <Sidebar />
        <main className="flex-1 overflow-y-auto p-4 md:p-8">
          <div className="space-y-6">
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
              <div className="space-y-2">
                <div className="h-8 w-48 bg-gray-200 rounded animate-pulse"></div>
                <div className="h-4 w-64 bg-gray-200 rounded animate-pulse"></div>
              </div>
              <div className="h-10 w-40 bg-gray-200 rounded animate-pulse"></div>
            </div>
            <div className="h-20 bg-gray-200 rounded animate-pulse"></div>
            <div className="grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
              {[...Array(6)].map((_, i) => (
                <div key={i} className="h-32 bg-gray-200 rounded animate-pulse"></div>
              ))}
            </div>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen bg-background">
      <Sidebar />
      <main className="flex-1 overflow-y-auto p-4 md:p-8">
        <div className="space-y-6">
          <motion.div 
            className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <div>
              <h1 className="text-2xl md:text-3xl font-bold tracking-tight">
                🏷️ دسته‌بندی‌ها
              </h1>
              <p className="text-muted-foreground text-sm md:text-base">
                سازماندهی اصطلاحات و عبارات پزشکی با دسته‌بندی
              </p>
            </div>
            <Button
              onClick={() => setShowAddDialog(true)}
              className="bg-blue-600 hover:bg-blue-700 w-full sm:w-auto shadow-lg transition-all duration-300 hover:scale-105"
            >
              ➕ افزودن دسته‌بندی جدید
            </Button>
          </motion.div>

          {/* Search */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
          >
            <Card className="shadow-md border-0 bg-linear-to-r from-blue-50 to-indigo-50">
              <CardContent className="p-4 md:p-6">
                <Input
                  placeholder="جستجو در دسته‌بندی‌ها..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full text-right"
                />
              </CardContent>
            </Card>
          </motion.div>

          {/* Categories Grid */}
          <motion.div 
            className="grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
            layout
          >
            <AnimatePresence>
              {filteredCategories.map((category, index) => (
                <motion.div
                  key={category.id}
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  exit={{ opacity: 0, scale: 0.9 }}
                  transition={{ duration: 0.3, delay: Math.min(index * 0.05, 0.5) }}
                  layout
                >
                  <Card
                    className="hover:shadow-xl transition-all duration-300 border-0 bg-white shadow-sm hover:border-blue-200 cursor-pointer group"
                    style={{ 
                      borderRight: `4px solid ${category.color}`,
                      borderLeft: 'none'
                    }}
                  >
                    <CardHeader className="pb-3">
                      <div className="flex items-center gap-3">
                        <div
                          className="w-5 h-5 rounded-full shadow-sm group-hover:scale-110 transition-transform duration-300"
                      style={{ backgroundColor: category.color }}
                    ></div>
                        <CardTitle className="text-lg font-bold text-gray-800">
                          {category.name}
                        </CardTitle>
                      </div>
                      {category.description && (
                        <CardDescription className="text-right text-gray-600 mt-2 line-clamp-2">
                          {category.description}
                        </CardDescription>
                      )}
                    </CardHeader>
                    <CardContent>
                      <div className="text-xs text-muted-foreground text-left">
                        ایجاد شده: {new Date(category.createdAt).toLocaleDateString('fa-IR')}
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              ))}
            </AnimatePresence>
          </motion.div>

          {filteredCategories.length === 0 && !isLoading && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5 }}
            >
              <Card className="text-center py-12 border-0 shadow-lg bg-linear-to-br from-gray-50 to-blue-50">
                <CardContent>
                  <div className="text-6xl mb-4">🏷️</div>
                  <h3 className="text-lg font-semibold mb-2">هیچ دسته‌بندی یافت نشد</h3>
                  <p className="text-muted-foreground mb-4">
                    {categories.length === 0
                      ? "با ایجاد اولین دسته‌بندی شروع کنید"
                      : "معیارهای جستجوی خود را تنظیم کنید"}
                  </p>
                  {categories.length === 0 && (
                    <Button
                      onClick={() => setShowAddDialog(true)}
                      className="bg-blue-600 hover:bg-blue-700 shadow-lg"
                    >
                      ایجاد اولین دسته‌بندی
                    </Button>
                  )}
                </CardContent>
              </Card>
            </motion.div>
          )}
        </div>

        {showAddDialog && (
          <AddCategoryDialog
            onClose={() => setShowAddDialog(false)}
            onAdd={handleAddCategory}
          />
        )}
      </main>
    </div>
  );
}
-----

// File: /app/flashcards/page.tsx
"use client";
import { useState, useEffect, useCallback, useRef } from "react";
import { Sidebar } from "../../components/layout/sidebar";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "../../components/ui/card";
import { Button } from "../../components/ui/button";
import { Input } from "../../components/ui/input";
import { MedicalTerm, MedicalPhrase, Category } from "../../types";
import { useToast } from "../../hooks/use-toast";

type FlashcardItem = {
  id: string;
  type: "term" | "phrase";
  front: string;
  back: string;
  pronunciation?: string;
  categories: Category[];
};

type StudySession = {
  id: string;
  allCards: FlashcardItem[];
  remainingCards: FlashcardItem[];
  correctCards: FlashcardItem[];
  currentCard: FlashcardItem | null;
  showAnswer: boolean;
  isTransitioning: boolean;
  correctCount: number;
  totalReviews: number;
};

export default function FlashcardsPage() {
  const [allFlashcards, setAllFlashcards] = useState<FlashcardItem[]>([]);
  const [filteredFlashcards, setFilteredFlashcards] = useState<FlashcardItem[]>(
    []
  );
  const [basketCards, setBasketCards] = useState<FlashcardItem[]>([]);
  const [studySession, setStudySession] = useState<StudySession | null>(null);
  const [categories, setCategories] = useState<Category[]>([]);
  const [activeTab, setActiveTab] = useState<"browse" | "basket">("browse");
  const { toast } = useToast();

  // Filter states
  const [searchTerm, setSearchTerm] = useState("");
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState("");
  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);

  const studySessionRef = useRef<StudySession | null>(null);
  studySessionRef.current = studySession;

  // Debounce search
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchTerm(searchTerm);
    }, 300);

    return () => clearTimeout(timer);
  }, [searchTerm]);

  useEffect(() => {
    fetchData();
    loadBasketFromStorage();
  }, []);

  useEffect(() => {
    filterFlashcards();
  }, [allFlashcards, debouncedSearchTerm, selectedCategories]);

  useEffect(() => {
    saveBasketToStorage();
  }, [basketCards]);

  const loadBasketFromStorage = useCallback(() => {
    try {
      const savedBasket = localStorage.getItem("flashcard-basket");
      if (savedBasket) {
        const parsed = JSON.parse(savedBasket);
        if (Array.isArray(parsed)) {
          setBasketCards(parsed);
        }
      }
    } catch (error) {
      console.error("Error loading basket from storage:", error);
      toast({
        title: "خطا",
        description: "در بارگذاری سبد مرور مشکل پیش آمد",
        variant: "destructive",
      });
    }
  }, [toast]);

  const saveBasketToStorage = useCallback(() => {
    try {
      localStorage.setItem("flashcard-basket", JSON.stringify(basketCards));
    } catch (error) {
      console.error("Error saving basket to storage:", error);
    }
  }, [basketCards]);

  const fetchData = useCallback(async () => {
    const controller = new AbortController();
    
    try {
      const [termsRes, phrasesRes, categoriesRes] = await Promise.all([
        fetch("/api/terms", { signal: controller.signal }),
        fetch("/api/phrases", { signal: controller.signal }),
        fetch("/api/categories", { signal: controller.signal }),
      ]);

      const flashcardsData: FlashcardItem[] = [];

      if (termsRes.ok) {
        const termsData = await termsRes.json();
        const terms = termsData.data || [];
        terms.forEach((term: MedicalTerm) => {
          flashcardsData.push({
            id: `term-${term.id}`,
            type: "term",
            front: term.term,
            back: term.meaning,
            pronunciation: term.pronunciation,
            categories: term.categories,
          });
        });
      }

      if (phrasesRes.ok) {
        const phrasesData = await phrasesRes.json();
        const phrases = phrasesData.data || [];
        phrases.forEach((phrase: MedicalPhrase) => {
          flashcardsData.push({
            id: `phrase-${phrase.id}`,
            type: "phrase",
            front: phrase.phrase,
            back: phrase.explanation,
            categories: phrase.categories,
          });
        });
      }

      if (categoriesRes.ok) {
        const categoriesData = await categoriesRes.json();
        setCategories(categoriesData.data || []);
      }

      setAllFlashcards(flashcardsData);
    } catch (error: any) {
      if (error.name !== 'AbortError') {
        console.error("Error fetching data:", error);
        toast({
          title: "خطا",
          description: "در دریافت اطلاعات مشکل پیش آمد",
          variant: "destructive",
        });
      }
    }

    return () => controller.abort();
  }, [toast]);

  const filterFlashcards = useCallback(() => {
    let filtered = allFlashcards;

    // Search filter
    if (debouncedSearchTerm) {
      filtered = filtered.filter(
        (card) =>
          card.front.toLowerCase().includes(debouncedSearchTerm.toLowerCase()) ||
          card.back.toLowerCase().includes(debouncedSearchTerm.toLowerCase())
      );
    }

    // Category filter
    if (selectedCategories.length > 0) {
      filtered = filtered.filter((card) =>
        card.categories.some((cat) => selectedCategories.includes(cat.id))
      );
    }

    setFilteredFlashcards(filtered);
  }, [allFlashcards, debouncedSearchTerm, selectedCategories]);

  // Basket functions
  const addToBasket = (card: FlashcardItem) => {
    if (!basketCards.find((c) => c.id === card.id)) {
      setBasketCards((prev) => [...prev, card]);
      toast({
        title: "اضافه شد",
        description: "کارت به سبد مرور اضافه شد",
      });
    }
  };

  const removeFromBasket = (cardId: string) => {
    setBasketCards((prev) => prev.filter((card) => card.id !== cardId));
    toast({
      title: "حذف شد",
      description: "کارت از سبد مرور حذف شد",
    });
  };

  const addAllToBasket = () => {
    const newCards = filteredFlashcards.filter(
      (card) => !basketCards.find((basketCard) => basketCard.id === card.id)
    );
    if (newCards.length > 0) {
      setBasketCards((prev) => [...prev, ...newCards]);
      toast({
        title: "اضافه شد",
        description: `${newCards.length} کارت به سبد مرور اضافه شد`,
      });
    }
  };

  const clearBasket = () => {
    setBasketCards([]);
    toast({
      title: "پاک شد",
      description: "سبد مرور خالی شد",
    });
  };

  const isInBasket = (cardId: string) => {
    return basketCards.some((card) => card.id === cardId);
  };

  const startStudySession = (cards: FlashcardItem[]) => {
    if (cards.length === 0) {
      toast({
        title: "خطا",
        description: "سبد مرور خالی است",
        variant: "destructive",
      });
      return;
    }

    const shuffledCards = [...cards].sort(() => Math.random() - 0.5);

    const session: StudySession = {
      id: Date.now().toString(),
      allCards: shuffledCards,
      remainingCards: [...shuffledCards],
      correctCards: [],
      currentCard: shuffledCards[0],
      showAnswer: false,
      isTransitioning: false,
      correctCount: 0,
      totalReviews: 0,
    };

    setStudySession(session);
  };

  const handleShowAnswer = () => {
    if (!studySessionRef.current) return;

    setStudySession({
      ...studySessionRef.current,
      showAnswer: true,
    });
  };

  const handleAnswer = (knewAnswer: boolean) => {
    if (!studySessionRef.current || !studySessionRef.current.currentCard) return;

    const currentSession = studySessionRef.current;
    const currentCard = currentSession.currentCard;
    
    let newRemainingCards = [...currentSession.remainingCards];
    let newCorrectCards = [...currentSession.correctCards];

    // Remove current card from remaining cards
    newRemainingCards = newRemainingCards.filter(
      (card) => card.id !== currentCard.id
    );

    if (knewAnswer) {
      newCorrectCards.push(currentCard);
    } else {
      newRemainingCards.push(currentCard);
    }

    // Start transition
    setStudySession({
      ...currentSession,
      isTransitioning: true,
      showAnswer: true,
      correctCount: knewAnswer
        ? currentSession.correctCount + 1
        : currentSession.correctCount,
      totalReviews: currentSession.totalReviews + 1,
    });

    // Move to next card after showing answer
    setTimeout(() => {
      const nextCard =
        newRemainingCards.length > 0 ? newRemainingCards[0] : null;

      setStudySession(current => {
        if (!current) return null;
        
        return {
          ...current,
          remainingCards: newRemainingCards,
          correctCards: newCorrectCards,
          currentCard: nextCard,
          isTransitioning: false,
          showAnswer: false,
        };
      });
    }, 1500);
  };

  const endStudySession = () => {
    setStudySession(null);
  };

  const getSessionProgress = () => {
    if (!studySession) return 0;
    const total = studySession.allCards.length;
    const completed = total - studySession.remainingCards.length;
    return (completed / total) * 100;
  };

  const getSessionStatus = () => {
    if (!studySession) return "";

    if (studySession.remainingCards.length === 0) {
      return "تکمیل شده! 🎉";
    }

    const round =
      studySession.allCards.length - studySession.remainingCards.length + 1;
    return `دور ${round} از ${studySession.allCards.length}`;
  };

  // Keyboard shortcuts
  useEffect(() => {
    if (!studySession) return;

    const handleKeyPress = (e: KeyboardEvent) => {
      if (e.code === 'Space' || e.code === 'Enter') {
        e.preventDefault();
        if (!studySession.showAnswer) {
          handleShowAnswer();
        }
      } else if (e.code === 'ArrowLeft') {
        e.preventDefault();
        if (studySession.showAnswer && !studySession.isTransitioning) {
          handleAnswer(false);
        }
      } else if (e.code === 'ArrowRight') {
        e.preventDefault();
        if (studySession.showAnswer && !studySession.isTransitioning) {
          handleAnswer(true);
        }
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [studySession]);

  if (studySession) {
    const progress = getSessionProgress();
    const sessionStatus = getSessionStatus();

    return (
      <div className="flex min-h-screen bg-background">
        <Sidebar />
        <main className="flex-1 overflow-y-auto p-4 md:p-8">
          <div className="max-w-4xl mx-auto space-y-6">
            {/* Header */}
            <div className="flex justify-between items-center">
              <Button onClick={endStudySession} variant="outline" size="sm">
                ← بازگشت
              </Button>
              <div className="text-center">
                <h2 className="text-lg font-semibold">{sessionStatus}</h2>
                <p className="text-sm text-muted-foreground">
                  {studySession.correctCount} از {studySession.totalReviews}{" "}
                  صحیح
                </p>
              </div>
              <div className="w-20"></div>
            </div>

            {/* Progress Bar */}
            <div className="bg-gray-200 rounded-full h-3">
              <div
                className="bg-blue-600 h-3 rounded-full transition-all duration-500"
                style={{ width: `${progress}%` }}
              />
            </div>

            {/* Stats */}
            <div className="grid grid-cols-3 gap-4 text-center">
              <Card>
                <CardContent className="p-3">
                  <div className="text-xl font-bold text-blue-600">
                    {studySession.allCards.length}
                  </div>
                  <div className="text-xs text-muted-foreground">
                    کل کارت‌ها
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-3">
                  <div className="text-xl font-bold text-green-600">
                    {studySession.correctCards.length}
                  </div>
                  <div className="text-xs text-muted-foreground">مسلط شده</div>
                </CardContent>
              </Card>
              <Card>
                <CardContent className="p-3">
                  <div className="text-xl font-bold text-orange-600">
                    {studySession.remainingCards.length}
                  </div>
                  <div className="text-xs text-muted-foreground">
                    مانده برای مرور
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Flashcard */}
            {studySession.currentCard ? (
              <div
                className={`transition-all duration-500 ${
                  studySession.isTransitioning
                    ? "opacity-70 scale-95"
                    : "opacity-100 scale-100"
                }`}
              >
                <Card
                  className={`border-2 ${
                    studySession.showAnswer
                      ? "border-green-300 bg-linear-to-br from-green-50 to-green-100"
                      : "border-blue-300 bg-linear-to-br from-blue-50 to-blue-100"
                  } shadow-lg`}
                >
                  <CardContent className="p-8">
                    {/* Card Header */}
                    <div className="flex items-center justify-between mb-6">
                      <div className="flex items-center gap-2">
                        <span className="text-2xl">
                          {studySession.currentCard.type === "term"
                            ? "📖"
                            : "💬"}
                        </span>
                        <span className="text-sm text-muted-foreground">
                          {studySession.currentCard.type === "term"
                            ? "اصطلاح پزشکی"
                            : "عبارت پزشکی"}
                        </span>
                      </div>
                      <div className="text-sm text-muted-foreground">
                        {studySession.allCards.length -
                          studySession.remainingCards.length +
                          1}{" "}
                        / {studySession.allCards.length}
                      </div>
                    </div>

                    {/* Question */}
                    {!studySession.showAnswer && (
                      <div className="text-center space-y-6">
                        <h2 className="text-3xl md:text-4xl font-bold text-gray-800 leading-tight">
                          {studySession.currentCard.front}
                        </h2>
                        {studySession.currentCard.pronunciation && (
                          <p className="text-xl text-blue-600 font-medium">
                            {studySession.currentCard.pronunciation}
                          </p>
                        )}
                        <div className="space-y-3">
                          <Button
                            onClick={handleShowAnswer}
                            className="bg-blue-600 hover:bg-blue-700 px-8 py-3 text-lg"
                            size="lg"
                          >
                            نمایش پاسخ (Space)
                          </Button>
                          <p className="text-sm text-muted-foreground">
                            از کلید Space یا Enter استفاده کنید
                          </p>
                        </div>
                      </div>
                    )}

                    {/* Answer */}
                    {studySession.showAnswer && (
                      <div className="text-center space-y-6 animate-fade-in">
                        <div className="space-y-4">
                          <h2 className="text-3xl md:text-4xl font-bold text-gray-800 leading-tight">
                            {studySession.currentCard.front}
                          </h2>
                          <div className="border-t border-gray-300 pt-4">
                            <h3 className="text-2xl md:text-3xl font-bold text-green-700 leading-tight">
                              {studySession.currentCard.back}
                            </h3>
                          </div>
                        </div>

                        {studySession.currentCard.pronunciation && (
                          <p className="text-xl text-blue-600 font-medium">
                            {studySession.currentCard.pronunciation}
                          </p>
                        )}

                        {/* Categories */}
                        <div className="flex flex-wrap gap-2 justify-center">
                          {studySession.currentCard.categories.map(
                            (category) => (
                              <span
                                key={category.id}
                                className="px-3 py-1 text-sm rounded-full text-white font-medium shadow-sm"
                                style={{ backgroundColor: category.color }}
                              >
                                {category.name}
                              </span>
                            )
                          )}
                        </div>

                        {/* Answer Buttons */}
                        {!studySession.isTransitioning ? (
                          <div className="flex gap-4 justify-center pt-4">
                            <Button
                              onClick={() => handleAnswer(false)}
                              className="bg-red-600 hover:bg-red-700 px-6 py-3 text-lg min-w-32 shadow-lg"
                              size="lg"
                            >
                              ❌ بلد نبودم (←)
                            </Button>
                            <Button
                              onClick={() => handleAnswer(true)}
                              className="bg-green-600 hover:bg-green-700 px-6 py-3 text-lg min-w-32 shadow-lg"
                              size="lg"
                            >
                              ✅ بلد بودم (→)
                            </Button>
                          </div>
                        ) : (
                          <div className="pt-4">
                            <div className="text-lg font-semibold text-green-700 animate-pulse">
                              در حال انتقال به کارت بعدی...
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            ) : (
              // Session Completed
              <Card className="text-center py-12 border-2 border-green-300 bg-linear-to-br from-green-50 to-green-100">
                <CardContent>
                  <div className="text-6xl mb-4">🎉</div>
                  <h2 className="text-2xl font-bold mb-2">
                    تبریک! مرور تکمیل شد
                  </h2>
                  <p className="text-muted-foreground mb-6">
                    شما تمام کارت‌ها را با موفقیت مرور کردید
                  </p>
                  <div className="grid grid-cols-2 gap-4 max-w-xs mx-auto mb-6">
                    <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                      <div className="text-2xl font-bold text-green-600">
                        {studySession.correctCount}
                      </div>
                      <div className="text-sm text-green-700">پاسخ صحیح</div>
                    </div>
                    <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                      <div className="text-2xl font-bold text-blue-600">
                        {studySession.totalReviews}
                      </div>
                      <div className="text-sm text-blue-700">تعداد مرور</div>
                    </div>
                  </div>
                  <Button
                    onClick={endStudySession}
                    className="bg-blue-600 hover:bg-blue-700 px-8 shadow-lg"
                    size="lg"
                  >
                    بازگشت به سبد مرور
                  </Button>
                </CardContent>
              </Card>
            )}
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="flex min-h-screen bg-background">
      <Sidebar />
      <main className="flex-1 overflow-y-auto p-4 md:p-8">
        <div className="space-y-6">
          {/* Header with Basket Info */}
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div>
              <h1 className="text-2xl md:text-3xl font-bold tracking-tight">
                فلش کارت‌ها
              </h1>
              <p className="text-muted-foreground text-sm md:text-base">
                سیستم مرور هوشمند با سبد مرور
              </p>
            </div>

            <div className="flex gap-2">
              {/* Basket Info */}
              {basketCards.length > 0 && (
                <div className="flex items-center gap-2 bg-orange-100 text-orange-800 px-3 py-2 rounded-lg">
                  <span className="text-lg">🛒</span>
                  <span className="font-medium">
                    {basketCards.length} کارت در سبد
                  </span>
                  <Button
                    onClick={() => startStudySession(basketCards)}
                    className="bg-orange-600 hover:bg-orange-700 text-white"
                    size="sm"
                  >
                    شروع مرور
                  </Button>
                </div>
              )}
            </div>
          </div>

          {/* Tabs */}
          <div className="flex border-b border-gray-200">
            <button
              onClick={() => setActiveTab("browse")}
              className={`px-4 py-2 font-medium text-sm border-b-2 transition-colors ${
                activeTab === "browse"
                  ? "border-blue-500 text-blue-600"
                  : "border-transparent text-gray-500 hover:text-gray-700"
              }`}
            >
              جستجو و فیلتر
            </button>
            <button
              onClick={() => setActiveTab("basket")}
              className={`px-4 py-2 font-medium text-sm border-b-2 transition-colors ${
                activeTab === "basket"
                  ? "border-orange-500 text-orange-600"
                  : "border-transparent text-gray-500 hover:text-gray-700"
              }`}
            >
              سبد مرور ({basketCards.length})
            </button>
          </div>

          {/* Browse Tab */}
          {activeTab === "browse" && (
            <>
              {/* Filters */}
              <Card>
                <CardHeader>
                  <CardTitle>فیلتر کارت‌ها</CardTitle>
                  <CardDescription>
                    کارت‌های مورد نظر برای مرور را انتخاب کنید
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {/* Search */}
                    <div>
                      <label className="text-sm font-medium mb-2 block">
                        جستجو
                      </label>
                      <Input
                        placeholder="جستجو در کارت‌ها..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                      />
                    </div>

                    {/* Categories */}
                    <div>
                      <label className="text-sm font-medium mb-2 block">
                        دسته‌بندی‌ها
                      </label>
                      <select
                        multiple
                        value={selectedCategories}
                        onChange={(e) =>
                          setSelectedCategories(
                            Array.from(
                              e.target.selectedOptions,
                              (option) => option.value
                            )
                          )
                        }
                        className="w-full border rounded-md p-2 h-32"
                      >
                        {categories.map((category) => (
                          <option key={category.id} value={category.id}>
                            {category.name}
                          </option>
                        ))}
                      </select>
                      <p className="text-xs text-muted-foreground mt-1">
                        برای انتخاب چندگانه Ctrl (Windows) یا Command (Mac) را
                        نگه دارید
                      </p>
                    </div>
                  </div>

                  <div className="flex gap-2 flex-wrap">
                    <Button
                      onClick={() => {
                        setSearchTerm("");
                        setSelectedCategories([]);
                      }}
                      variant="outline"
                      size="sm"
                    >
                      پاک کردن فیلترها
                    </Button>

                    {filteredFlashcards.length > 0 && (
                      <Button
                        onClick={addAllToBasket}
                        className="bg-green-600 hover:bg-green-700"
                        size="sm"
                      >
                        ➕ افزودن همه به سبد ({filteredFlashcards.length} کارت)
                      </Button>
                    )}
                  </div>
                </CardContent>
              </Card>

              {/* Cards List */}
              <Card>
                <CardHeader>
                  <CardTitle>
                    کارت‌های فیلتر شده ({filteredFlashcards.length})
                  </CardTitle>
                  <CardDescription>
                    {filteredFlashcards.length === 0
                      ? "هیچ کارتی با فیلترهای انتخاب شده یافت نشد"
                      : "کارت‌های انتخاب شده برای مرور"}
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                    {filteredFlashcards.map((card, index) => (
                      <Card
                        key={card.id}
                        className="hover:shadow-lg transition-shadow border-2 border-blue-100 relative"
                      >
                        <CardContent className="p-4">
                          {/* Add/Remove from Basket Button */}
                          <button
                            onClick={() =>
                              isInBasket(card.id)
                                ? removeFromBasket(card.id)
                                : addToBasket(card)
                            }
                            className={`absolute top-3 left-3 w-8 h-8 rounded-full flex items-center justify-center text-white transition-colors ${
                              isInBasket(card.id)
                                ? "bg-red-500 hover:bg-red-600"
                                : "bg-green-500 hover:bg-green-600"
                            }`}
                          >
                            {isInBasket(card.id) ? "✕" : "+"}
                          </button>

                          <div className="flex items-center gap-2 mb-3 pr-8">
                            <span className="text-2xl">
                              {card.type === "term" ? "📖" : "💬"}
                            </span>
                            <h3 className="font-semibold text-lg">
                              {card.front}
                            </h3>
                          </div>
                          <p className="text-sm text-muted-foreground mb-3 line-clamp-2">
                            {card.back}
                          </p>
                          {card.pronunciation && (
                            <p className="text-xs text-blue-600 mb-3">
                              {card.pronunciation}
                            </p>
                          )}
                          <div className="flex flex-wrap gap-1">
                            {card.categories.map((category) => (
                              <span
                                key={category.id}
                                className="px-2 py-1 text-xs rounded-full text-white font-medium"
                                style={{ backgroundColor: category.color }}
                              >
                                {category.name}
                              </span>
                            ))}
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </>
          )}

          {/* Basket Tab */}
          {activeTab === "basket" && (
            <Card>
              <CardHeader>
                <div className="flex justify-between items-center">
                  <div>
                    <CardTitle>سبد مرور</CardTitle>
                    <CardDescription>
                      کارت‌های انتخاب شده برای مرور ({basketCards.length} کارت)
                    </CardDescription>
                  </div>
                  <div className="flex gap-2">
                    {basketCards.length > 0 && (
                      <>
                        <Button
                          onClick={() => startStudySession(basketCards)}
                          className="bg-blue-600 hover:bg-blue-700"
                        >
                          شروع مرور
                        </Button>
                        <Button
                          onClick={clearBasket}
                          variant="outline"
                          size="sm"
                        >
                          پاک کردن سبد
                        </Button>
                      </>
                    )}
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                {basketCards.length === 0 ? (
                  <div className="text-center py-12">
                    <div className="text-6xl mb-4">🛒</div>
                    <h3 className="text-lg font-semibold mb-2">
                      سبد مرور خالی است
                    </h3>
                    <p className="text-muted-foreground">
                      کارت‌های مورد نظر برای مرور را از تب جستجو اضافه کنید
                    </p>
                  </div>
                ) : (
                  <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                    {basketCards.map((card) => (
                      <Card
                        key={card.id}
                        className="hover:shadow-lg transition-shadow border-2 border-orange-100 relative"
                      >
                        <CardContent className="p-4">
                          <button
                            onClick={() => removeFromBasket(card.id)}
                            className="absolute top-3 left-3 w-8 h-8 rounded-full bg-red-500 hover:bg-red-600 flex items-center justify-center text-white"
                          >
                            ✕
                          </button>

                          <div className="flex items-center gap-2 mb-3 pr-8">
                            <span className="text-2xl">
                              {card.type === "term" ? "📖" : "💬"}
                            </span>
                            <h3 className="font-semibold text-lg">
                              {card.front}
                            </h3>
                          </div>
                          <p className="text-sm text-muted-foreground mb-3 line-clamp-2">
                            {card.back}
                          </p>
                          {card.pronunciation && (
                            <p className="text-xs text-blue-600 mb-3">
                              {card.pronunciation}
                            </p>
                          )}
                          <div className="flex flex-wrap gap-1">
                            {card.categories.map((category) => (
                              <span
                                key={category.id}
                                className="px-2 py-1 text-xs rounded-full text-white font-medium"
                                style={{ backgroundColor: category.color }}
                              >
                                {category.name}
                              </span>
                            ))}
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </div>
      </main>
    </div>
  );
}
-----

// File: /components/add-category-dialog.tsx
"use client";
import { useState, useRef, useEffect } from "react";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { useToast } from "../hooks/use-toast";

interface AddCategoryDialogProps {
  onClose: () => void;
  onAdd: (categoryData: {
    name: string;
    description?: string;
    color: string;
  }) => void;
}

const predefinedColors = [
  "#3B82F6", // blue
  "#EF4444", // red
  "#10B981", // green
  "#F59E0B", // amber
  "#8B5CF6", // violet
  "#EC4899", // pink
  "#06B6D4", // cyan
  "#84CC16", // lime
];

export function AddCategoryDialog({ onClose, onAdd }: AddCategoryDialogProps) {
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [selectedColor, setSelectedColor] = useState(predefinedColors[0]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();
  
  const dialogRef = useRef<HTMLDivElement>(null);
  const firstInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    firstInputRef.current?.focus();
    
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    const handleClickOutside = (e: MouseEvent) => {
      if (dialogRef.current && !dialogRef.current.contains(e.target as Node)) {
        onClose();
      }
    };

    document.addEventListener('keydown', handleEscape);
    document.addEventListener('mousedown', handleClickOutside);

    return () => {
      document.removeEventListener('keydown', handleEscape);
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [onClose]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!name.trim()) {
      toast({
        title: "خطا",
        description: "نام دسته‌بندی الزامی است",
        variant: "destructive",
      });
      return;
    }

    setIsSubmitting(true);
    
    try {
      await onAdd({
        name: name.trim(),
        description: description.trim() || undefined,
        color: selectedColor,
      });
    } catch (error) {
      console.error("Error in dialog:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50 animate-fade-in">
      <div 
        ref={dialogRef}
        className="w-full max-w-md"
        role="dialog"
        aria-modal="true"
        aria-labelledby="dialog-title"
      >
        <Card className="shadow-2xl border-0 bg-linear-to-br from-white to-blue-50">
          <CardHeader className="border-b border-gray-200">
            <CardTitle id="dialog-title" className="text-xl font-bold text-gray-800">
              افزودن دسته‌بندی جدید
            </CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Name Field */}
              <div className="space-y-2">
                <Label htmlFor="category-name" className="text-sm font-medium text-gray-700">
                  نام دسته‌بندی *
                </Label>
                <Input
                  ref={firstInputRef}
                  id="category-name"
                  type="text"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  placeholder="مثال: اصطلاحات قلب و عروق"
                  className="w-full text-right"
                  required
                />
              </div>

              {/* Description Field */}
              <div className="space-y-2">
                <Label htmlFor="category-description" className="text-sm font-medium text-gray-700">
                  توضیحات (اختیاری)
                </Label>
                <textarea
                  id="category-description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="توضیحات مربوط به این دسته‌بندی..."
                  rows={3}
                  className="w-full border border-gray-300 rounded-md p-3 text-sm resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-right"
                />
              </div>

              {/* Color Selection */}
              <div className="space-y-3">
                <Label className="text-sm font-medium text-gray-700">
                  رنگ دسته‌بندی
                </Label>
                <div className="grid grid-cols-4 gap-3">
                  {predefinedColors.map((color) => (
                    <button
                      key={color}
                      type="button"
                      onClick={() => setSelectedColor(color)}
                      className={`w-10 h-10 rounded-full border-2 transition-all duration-200 hover:scale-110 ${
                        selectedColor === color
                          ? "border-gray-800 shadow-lg scale-110"
                          : "border-gray-300"
                      }`}
                      style={{ backgroundColor: color }}
                      aria-label={`Select color ${color}`}
                    />
                  ))}
                </div>
                <div className="flex items-center gap-2 pt-2">
                  <div
                    className="w-4 h-4 rounded-full shadow-sm"
                    style={{ backgroundColor: selectedColor }}
                  ></div>
                  <span className="text-sm text-gray-600 font-mono">
                    {selectedColor}
                  </span>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex gap-3 pt-4">
                <Button
                  type="button"
                  onClick={onClose}
                  variant="outline"
                  className="flex-1 border-gray-300 text-gray-700 hover:bg-gray-50"
                  disabled={isSubmitting}
                >
                  انصراف
                </Button>
                <Button
                  type="submit"
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white shadow-lg transition-all duration-200 hover:scale-105"
                  disabled={isSubmitting || !name.trim()}
                >
                  {isSubmitting ? (
                    <div className="flex items-center gap-2">
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      <span>در حال افزودن...</span>
                    </div>
                  ) : (
                    "➕ افزودن دسته‌بندی"
                  )}
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
-----

// File: /hooks/use-toast.ts
"use client";
import { useState, createContext, useContext, ReactNode } from "react";

export type ToastVariant = "default" | "destructive";

export interface Toast {
  id: string;
  title: string;
  description?: string;
  variant?: ToastVariant;
  duration?: number;
}

interface ToastContextType {
  toasts: Toast[];
  toast: (props: Omit<Toast, "id">) => void;
  dismissToast: (id: string) => void;
}

const ToastContext = createContext<ToastContextType | undefined>(undefined);

export function ToastProvider({ children }: { children: ReactNode }) {
  const [toasts, setToasts] = useState<Toast[]>([]);

  const toast = ({
    title,
    description,
    variant = "default",
    duration = 5000,
  }: Omit<Toast, "id">) => {
    const id = Math.random().toString(36).substring(2, 9);
    
    setToasts((prevToasts) => [...prevToasts, { id, title, description, variant, duration }]);

    if (duration > 0) {
      setTimeout(() => {
        dismissToast(id);
      }, duration);
    }
  };

  const dismissToast = (id: string) => {
    setToasts((prevToasts) => prevToasts.filter((toast) => toast.id !== id));
  };

  return (
    <ToastContext.Provider value={{ toasts, toast, dismissToast }}>
      {children}
      <ToastContainer />
    </ToastContext.Provider>
  );
}

function ToastContainer() {
  const { toasts, dismissToast } = useContext(ToastContext)!;

  if (toasts.length === 0) return null;

  return (
    <div className="fixed top-4 right-4 z-50 space-y-2 max-w-sm w-full">
      {toasts.map((toast) => (
        <div
          key={toast.id}
          className={`p-4 rounded-lg shadow-lg border transform transition-all duration-300 ${
            toast.variant === "destructive"
              ? "bg-red-50 border-red-200 text-red-800"
              : "bg-green-50 border-green-200 text-green-800"
          }`}
        >
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <h4 className="font-semibold text-sm">{toast.title}</h4>
              {toast.description && (
                <p className="text-sm mt-1 opacity-90">{toast.description}</p>
              )}
            </div>
            <button
              onClick={() => dismissToast(toast.id)}
              className="flex-shrink-0 ml-2 text-lg hover:opacity-70 transition-opacity"
            >
              ×
            </button>
          </div>
        </div>
      ))}
    </div>
  );
}

export function useToast() {
  const context = useContext(ToastContext);
  if (context === undefined) {
    throw new Error("useToast must be used within a ToastProvider");
  }
  return context;
}
-----

// File: /app/providers.tsx
"use client";
import { ToastProvider } from "../hooks/use-toast";

export function Providers({ children }: { children: React.ReactNode }) {
  return <ToastProvider>{children}</ToastProvider>;
}
-----

// File: /app/layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { AuthProvider } from "../components/auth-provider";
import { Providers } from "./providers";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Medical Flashcards App",
  description: "سیستم مرور هوشمند اصطلاحات پزشکی",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="fa" dir="rtl">
      <body className={inter.className}>
        <Providers>
          <AuthProvider>{children}</AuthProvider>
        </Providers>
      </body>
    </html>
  );
}
-----